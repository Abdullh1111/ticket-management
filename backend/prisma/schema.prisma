// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  Technical
  Billing
  General
}

enum Priority {
  Low
  Medium
  High
}

enum Status {
  Open
  InProgress  
  Resolved
  Closed
}


model User {
  id                       String             @id @default(uuid())
  email                    String             @unique
  password                 String
  verificationToken        String?            @unique
  verificationTokenExpiry  DateTime?
  verified                 Boolean            @default(false)
  expiresAt                DateTime?
  otp                      String?            @db.VarChar(6)
  role                     Role               @default(USER)
  profile                  Profile?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  resetToken               String?            @unique
  resetTokenExpiry         DateTime?
  
  tickets                  Ticket[]
  @@map("users")
}

model Profile {
  id                String    @id   @default(cuid())
  fullName          String
  userId            String         @unique
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ticket {
  id           String       @id @default(cuid())
  subject      String
  description  String
  category     Category
  priority     Priority
  status       Status      @default(InProgress)
  attachmentUrl String?   // Optional
  comments     Comment[]  // One-to-many relationship
  ownerId      String
  owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Comment {
  id        String      @id @default(cuid())
  author    String
  content   String
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
}



